import random  # for choosing the random responses
import json
import pickle # for sterilization
import numpy as np

import nltk  # natural language toolkit
from nltk.stem import WordNetLemmatizer # this reduces the words to their stems, so we don't lose performances because the bot looks for the exact words

from tensorflow.keras.models import load_model


lemmatizer = WordNetLemmatizer()

intents = json.loads(open('intents.json').read())


words = pickle.load(open('words.pkl', 'rb'))
classes = pickle.load(open('classes.pkl', 'rb'))
model = load_model('chatbotmodel.keras')

def clean_up_sentence(sentence):
    sentence_words = nltk.word_tokenize(sentence)
    sentence_words = [lemmatizer.lemmatize(word) for word in sentence_words]
    return sentence_words

def bag_of_words(sentence):
    sentence_words = clean_up_sentence(sentence)
    bag = [0] * len(words)
    for w in sentence_words:
        for i, word in enumerate(words):
            if word == w:
                bag[i] = 1
    return np.array(bag)

def predict_class(sentence):
    bow = bag_of_words(sentence)
    res = model.predict(np.array([bow]))[0]
    ERROR_THRESHOLD = 0.25
    results = [[i, r]for i, r in enumerate(res) if r > ERROR_THRESHOLD]

    results.sort(key=lambda x: x[1], reverse=True)
    return_list = []
    for r in results:
        return_list.append({'intent': classes[r[0]], 'probability': str(r[1])})
        return return_list

def get_response(intents_list, intents_json):
    tag = intents_list[0]['intent']
    probability = intents_list[0]['probability']
    print(intents_list)
    if float(probability) < .66:
        
        result = "I am sorry, unable to understand you! Please call customer service at +1 504-321-1338 for further assistance"
    else:

    
       list_of_intents = intents_json['intents']
       for i in list_of_intents:
          if i['tag'] == tag:
              result = random.choice(i['responses'])
              break
    return result
def preprocess(message):
    output = message
    output = output.lower()
    output = output.replace('corn rows', 'cornrows')
    return output
    
def answer(message):
    message = preprocess(message)
    answer = predict_class(message)
    return get_response(answer, intents)

print ("Hello! My name is Sika, I'm Lekeo Beauty automated online assistant. How can I help you today?")

# while True:
#      message = input("")
#      ints = predict_class(preprocess(message))
#      res = get_response(ints, intents)
#      print(res)
